function [node,library_geometries,library_controllers,node_list]=getMeshNode(gltf,documentNode,library_geometries,library_controllers,node_id,node_list,normals,tangents,binormals)
    % GETMESHNODE is a helper function for writing COLLADA files.
    %
    % Â© Copyright 2014-2023 Rohan Chabukswar
    %
    % This file is part of MATLAB GLTF.
    %
    % MATLAB GLTF is free software: you can redistribute it and/or modify
    % it under the terms of the GNU General Public License as published by
    % the Free Software Foundation, either version 3 of the License, or (at
    % your option) any later version.
    %
    % MATLAB GLTF is distributed in the hope that it will be useful, but
    % WITHOUT ANY WARRANTY; without even the implied warranty of
    % MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
    % General Public License for more details.
    %
    % You should have received a copy of the GNU General Public License
    % along with MATLAB GLTF. If not, see <https://www.gnu.org/licenses/>.
    %
    mesh_idx=gltf.nodes{node_id}.mesh+1;
    node=documentNode.createElement("node");
    node.setAttribute("id","node_"+string(node_id));
    for primitive_idx=1:numel(gltf.meshes{mesh_idx}.primitives)
        subnode=documentNode.createElement("node");
        subnode.setAttribute("id","node_"+string(node_id)+"_"+string(primitive_idx));
        vertex_data=gltf.getAccessor(gltf.meshes{mesh_idx}.primitives{primitive_idx}.attributes.POSITION);
        faces_data=reshape(gltf.getAccessor(gltf.meshes{mesh_idx}.primitives{primitive_idx}.indices)+1,3,[])';
        faces_data=GLTF.fromTriangles(faces_data);
        if(isfield(gltf.meshes{mesh_idx}.primitives{primitive_idx},'material') && isfield(gltf.meshes{mesh_idx}.primitives{primitive_idx}.material,'doubleSided'))
            doubleSided=gltf.materials{gltf.meshes{mesh_idx}.primitives{primitive_idx}.material+1}.doubleSided;
        else
            doubleSided=false;
        end
        if(doubleSided)
            faces_data_temp=nan(size(faces_data,1)*2,size(faces_data,2));
            for f=1:size(faces_data,1)
                faces_data_temp(2*f-1,:)=faces_data(f,:);
                faces_data_temp(2*f,:)=nan;
                faces_data_temp(2*f,1:nnz(~isnan(faces_data(f,:))))=flip(faces_data(f,1:nnz(~isnan(faces_data(f,:)))));
            end
            faces_data=faces_data_temp;
        end
        if(isempty(faces_data))
            faces_data=reshape(1:size(vertex_data,1),3,[])';
        end
        tangents=or(tangents,binormals);
        normals=or(normals,tangents);
        if(size(faces_data,2)<3)
            normals=false;
            tangents=false;
            binormals=false;
        end
        if(normals)
            normals_data=GLTF.faceNormals(faces_data,vertex_data);
        else
            normals_data=[];
        end
        tempfaces=reshape(faces_data',[],1);
        tempfaces=tempfaces(~isnan(tempfaces));
        vertex_data_old=vertex_data;
        [vertex_data,~,tempfaces2]=uniquetol(vertex_data(tempfaces,:),1e-6,'ByRows',true);
        position_idx=reshape(tempfaces2-1,1,[]);
        if(normals)
            normals_idx=nan(size(faces_data,2),size(faces_data,1));
            for i=1:size(faces_data,1)
                normals_idx(1:nnz(~isnan(faces_data(i,:))),i)=i;
            end
            normals_idx=normals_idx(~isnan(normals_idx));
            normals_data(abs(normals_data)<eps)=0;
            [normals_data,~,normals_idx]=uniquetol(normals_data(normals_idx,:),1e-6,'ByRows',true);
            normals_idx=reshape(normals_idx',1,[])-1;
            idx=[position_idx;normals_idx];
        else
            normals_data=[];
            idx=position_idx;
        end
        tangents=and(tangents,or(isfield(gltf.meshes{mesh_idx}.primitives{primitive_idx}.attributes,'TEXCOORD_0'),isfield(gltf.meshes{mesh_idx}.primitives{primitive_idx}.attributes,'TANGENT')));
        if(tangents)
            if(isfield(gltf.meshes{mesh_idx}.primitives{primitive_idx}.attributes,'TEXCOORD_0'))
                uv_data=gltf.getAccessor(gltf.meshes{mesh_idx}.primitives{primitive_idx}.attributes.TEXCOORD_0);
                [tangents_data,binormals_data]=GLTF.faceTangents(faces_data,vertex_data_old,uv_data);
                base_idx=reshape(repmat(1:size(faces_data,1),size(faces_data,2),1),1,[]);
                tangents_data(abs(tangents_data)<eps)=0;
                [tangents_data,~,tangents_idx]=uniquetol(tangents_data(base_idx,:),1e-6,'ByRows',true);
                tangents_idx=reshape(tangents_idx',1,[])-1;
                binormals_data(abs(binormals_data)<eps)=0;
                [binormals_data,~,binormals_idx]=uniquetol(binormals_data(base_idx,:),1e-6,'ByRows',true);
                binormals_idx=reshape(binormals_idx',1,[])-1;
            else
                tv_data=gltf.getAccessor(gltf.meshes{mesh_idx}.primitives{primitive_idx}.attributes.TANGENT);
                handedness=tv_data(:,4);
                for i=1:size(faces_data,1)
                    if(min(handedness(faces_data(i,:)))<max(handedness(faces_data(i,:))))
                        tangents=false;
                        break;
                    end
                end
                nf_data=GLTF.faceNormals(faces_data,vertex_data_old);
                if(tangents)
                    tv_data=tv_data(:,1:3);
                    tangents_data=nan(size(faces_data,1),3);
                    binormals_data=nan(size(faces_data,1),3);
                    for i=1:size(faces_data,1)
                        tangents_data(i,:)=mean(tv_data(faces_data(i,:),:),1);
                        tangents_data(i,:)=tangents_data(i,:)/vecnorm(tangents_data(i,:),2,2);
                        binormals_data(i,:)=cross(nf_data(i,:),tangents_data(i,:))*handedness(faces_data(i,1));
                    end
                    base_idx=reshape(repmat(1:size(faces_data,1),size(faces_data,2),1),1,[]);
                    tangents_data(abs(tangents_data)<eps)=0;
                    [tangents_data,~,tangents_idx]=uniquetol(tangents_data(base_idx,:),1e-6,'ByRows',true);
                    tangents_idx=reshape(tangents_idx',1,[])-1;
                    binormals_data(abs(binormals_data)<eps)=0;
                    [binormals_data,~,binormals_idx]=uniquetol(binormals_data(base_idx,:),1e-6,'ByRows',true);
                    binormals_idx=reshape(binormals_idx',1,[])-1;
                else
                    tangents_data=[];
                    binormals_data=[];
                end
            end
        else
            tangents_data=[];
            binormals_data=[];
        end
        binormals=and(binormals,tangents);
        if(~binormals)
            binormals_data=[];
        end
        if(tangents)
            idx=[idx;tangents_idx]; %#ok<AGROW>
        end
        if(binormals)
            idx=[idx;binormals_idx]; %#ok<AGROW>
        end
        if(isfield(gltf.meshes{mesh_idx}.primitives{primitive_idx}.attributes,'TEXCOORD_0'))
            uv_data=gltf.getAccessor(gltf.meshes{mesh_idx}.primitives{primitive_idx}.attributes.TEXCOORD_0);
            uv_data(abs(uv_data)<eps)=0;
            [uv_data,~,ic]=uniquetol(uv_data(tempfaces,:),1e-6,'ByRows',true);
            uv_data(:,2)=1-uv_data(:,2);
            texture_idx=reshape(ic(1:numel(tempfaces)),1,[])-1;
            idx=[idx;texture_idx]; %#ok<AGROW>
        end

        if(isfield(gltf.meshes{mesh_idx}.primitives{primitive_idx}.attributes,'COLOR_0'))
            c_data=gltf.getAccessor(gltf.meshes{mesh_idx}.primitives{primitive_idx}.attributes.COLOR_0);
            if(size(c_data,1)==size(faces_data,1))
                c_data(abs(c_data)<eps)=0;
                [c_data,~,ic]=uniquetol(c_data,1e-6,'ByRows',true);
                color_idx=nan(size(faces_data));
                for i=1:size(faces_data,1)
                    color_idx(i,1:nnz(~isnan(faces_data(i,:))))=ic(i);
                end
                color_idx=reshape(color_idx',1,[])-1;
                color_idx=color_idx(~isnan(color_idx));
            else
                c_data(abs(c_data)<eps)=0;
                [c_data,~,ic]=uniquetol(c_data(tempfaces,:),1e-6,'ByRows',true);
                color_idx=reshape(ic(1:numel(tempfaces)),1,[])-1;
            end
            idx=[idx;color_idx]; %#ok<AGROW>
        end

        if(isfield(gltf.nodes{node_id},'skin'))
            instance_geometry=documentNode.createElement("instance_controller");
            instance_geometry.setAttribute("url","#geometry_"+string(mesh_idx)+"_"+string(primitive_idx)+"_skin");
        elseif(isfield(gltf.meshes{mesh_idx}.primitives{primitive_idx},'targets'))
            instance_geometry=documentNode.createElement("instance_controller");
            instance_geometry.setAttribute("url","#geometry_"+string(mesh_idx)+"_"+string(primitive_idx)+"_morph");
        else
            instance_geometry=documentNode.createElement("instance_geometry");
            instance_geometry.setAttribute("url","#geometry_"+string(mesh_idx)+"_"+string(primitive_idx));
        end

        if(isfield(gltf.meshes{mesh_idx}.primitives{primitive_idx},'material'))
            bind_material=documentNode.createElement("bind_material");
            technique_common=documentNode.createElement("technique_common");
            instance_material=documentNode.createElement("instance_material");
            instance_material.setAttribute("symbol","material_"+string(gltf.meshes{mesh_idx}.primitives{primitive_idx}.material+1));
            instance_material.setAttribute("target","#material_"+string(gltf.meshes{mesh_idx}.primitives{primitive_idx}.material+1));
            technique_common.appendChild(instance_material);
            bind_material.appendChild(technique_common);
            instance_geometry.appendChild(bind_material);
        end
        subnode.appendChild(instance_geometry);

        geometry=documentNode.createElement("geometry");
        geometry.setAttribute("id","geometry_"+string(mesh_idx)+"_"+string(primitive_idx))
        mesh=documentNode.createElement("mesh");
        source=documentNode.createElement("source");
        source.setAttribute("id","source_position_"+string(mesh_idx)+"_"+string(primitive_idx))
        float_array=documentNode.createElement("float_array");
        float_array.setAttribute("id","position_array_"+string(mesh_idx)+"_"+string(primitive_idx));
        float_array.setAttribute("count",string(numel(vertex_data)));
        float_array.appendChild(documentNode.createTextNode(strip(sprintf(GLTF.formatSpec_float(),vertex_data'))));
        source.appendChild(float_array);
        technique_common=documentNode.createElement("technique_common");
        accessor=documentNode.createElement("accessor");
        accessor.setAttribute("count",string(size(vertex_data,1)));
        accessor.setAttribute("source","#position_array_"+string(mesh_idx)+"_"+string(primitive_idx));
        accessor.setAttribute("stride",string(size(vertex_data,2)));
        param=documentNode.createElement("param");
        param.setAttribute("name","X");
        param.setAttribute("type","float");
        accessor.appendChild(param);
        param=documentNode.createElement("param");
        param.setAttribute("name","Y");
        param.setAttribute("type","float");
        accessor.appendChild(param);
        param=documentNode.createElement("param");
        param.setAttribute("name","Z");
        param.setAttribute("type","float");
        accessor.appendChild(param);
        technique_common.appendChild(accessor);
        source.appendChild(technique_common);
        mesh.appendChild(source);

        if(~isempty(normals_data))
            source=documentNode.createElement("source");
            source.setAttribute("id","source_normal_"+string(mesh_idx)+"_"+string(primitive_idx))
            float_array=documentNode.createElement("float_array");
            float_array.setAttribute("id","normal_array_"+string(mesh_idx)+"_"+string(primitive_idx));
            float_array.setAttribute("count",string(numel(normals_data)));
            float_array.appendChild(documentNode.createTextNode(strip(sprintf(GLTF.formatSpec_float(),normals_data'))));
            source.appendChild(float_array);
            technique_common=documentNode.createElement("technique_common");
            accessor=documentNode.createElement("accessor");
            accessor.setAttribute("count",string(size(normals_data,1)));
            accessor.setAttribute("source","#normal_array_"+string(mesh_idx)+"_"+string(primitive_idx));
            accessor.setAttribute("stride",string(size(normals_data,2)));
            param=documentNode.createElement("param");
            param.setAttribute("name","X");
            param.setAttribute("type","float");
            accessor.appendChild(param);
            param=documentNode.createElement("param");
            param.setAttribute("name","Y");
            param.setAttribute("type","float");
            accessor.appendChild(param);
            param=documentNode.createElement("param");
            param.setAttribute("name","Z");
            param.setAttribute("type","float");
            accessor.appendChild(param);
            technique_common.appendChild(accessor);
            source.appendChild(technique_common);
            mesh.appendChild(source);
        end

        if(~isempty(tangents_data))
            source=documentNode.createElement("source");
            source.setAttribute("id","source_tangent_"+string(mesh_idx)+"_"+string(primitive_idx))
            float_array=documentNode.createElement("float_array");
            float_array.setAttribute("id","tangent_array_"+string(mesh_idx)+"_"+string(primitive_idx));
            float_array.setAttribute("count",string(numel(tangents_data)));
            float_array.appendChild(documentNode.createTextNode(strip(sprintf(GLTF.formatSpec_float(),tangents_data'))));
            source.appendChild(float_array);
            technique_common=documentNode.createElement("technique_common");
            accessor=documentNode.createElement("accessor");
            accessor.setAttribute("count",string(size(tangents_data,1)));
            accessor.setAttribute("source","#tangent_array_"+string(mesh_idx)+"_"+string(primitive_idx));
            accessor.setAttribute("stride",string(size(tangents_data,2)));
            param=documentNode.createElement("param");
            param.setAttribute("name","X");
            param.setAttribute("type","float");
            accessor.appendChild(param);
            param=documentNode.createElement("param");
            param.setAttribute("name","Y");
            param.setAttribute("type","float");
            accessor.appendChild(param);
            param=documentNode.createElement("param");
            param.setAttribute("name","Z");
            param.setAttribute("type","float");
            accessor.appendChild(param);
            technique_common.appendChild(accessor);
            source.appendChild(technique_common);
            mesh.appendChild(source);
        end

        if(~isempty(binormals_data))
            source=documentNode.createElement("source");
            source.setAttribute("id","source_binormal_"+string(mesh_idx)+"_"+string(primitive_idx))
            float_array=documentNode.createElement("float_array");
            float_array.setAttribute("id","binormal_array_"+string(mesh_idx)+"_"+string(primitive_idx));
            float_array.setAttribute("count",string(numel(binormals_data)));
            float_array.appendChild(documentNode.createTextNode(strip(sprintf(GLTF.formatSpec_float(),binormals_data'))));
            source.appendChild(float_array);
            technique_common=documentNode.createElement("technique_common");
            accessor=documentNode.createElement("accessor");
            accessor.setAttribute("count",string(size(binormals_data,1)));
            accessor.setAttribute("source","#binormal_array_"+string(mesh_idx)+"_"+string(primitive_idx));
            accessor.setAttribute("stride",string(size(binormals_data,2)));
            param=documentNode.createElement("param");
            param.setAttribute("name","X");
            param.setAttribute("type","float");
            accessor.appendChild(param);
            param=documentNode.createElement("param");
            param.setAttribute("name","Y");
            param.setAttribute("type","float");
            accessor.appendChild(param);
            param=documentNode.createElement("param");
            param.setAttribute("name","Z");
            param.setAttribute("type","float");
            accessor.appendChild(param);
            technique_common.appendChild(accessor);
            source.appendChild(technique_common);
            mesh.appendChild(source);
        end

        if(isfield(gltf.meshes{mesh_idx}.primitives{primitive_idx}.attributes,'TEXCOORD_0'))
            source=documentNode.createElement("source");
            source.setAttribute("id","source_texture_"+string(mesh_idx)+"_"+string(primitive_idx))
            float_array=documentNode.createElement("float_array");
            float_array.setAttribute("id","texture_array_"+string(mesh_idx)+"_"+string(primitive_idx));
            float_array.setAttribute("count",string(numel(uv_data)));
            float_array.appendChild(documentNode.createTextNode(strip(sprintf(GLTF.formatSpec_float(),uv_data'))));
            source.appendChild(float_array);
            technique_common=documentNode.createElement("technique_common");
            accessor=documentNode.createElement("accessor");
            accessor.setAttribute("count",string(size(uv_data,1)));
            accessor.setAttribute("source","#texture_array_"+string(mesh_idx)+"_"+string(primitive_idx));
            accessor.setAttribute("stride",string(size(uv_data,2)));
            param=documentNode.createElement("param");
            param.setAttribute("name","S");
            param.setAttribute("type","float");
            accessor.appendChild(param);
            param=documentNode.createElement("param");
            param.setAttribute("name","T");
            param.setAttribute("type","float");
            accessor.appendChild(param);
            technique_common.appendChild(accessor);
            source.appendChild(technique_common);
            mesh.appendChild(source);
        end

        if(isfield(gltf.meshes{mesh_idx}.primitives{primitive_idx}.attributes,'COLOR_0'))
            source=documentNode.createElement("source");
            source.setAttribute("id","source_color_"+string(mesh_idx)+"_"+string(primitive_idx))
            float_array=documentNode.createElement("float_array");
            float_array.setAttribute("id","color_array_"+string(mesh_idx)+"_"+string(primitive_idx));
            float_array.setAttribute("count",string(numel(c_data)));
            float_array.appendChild(documentNode.createTextNode(strip(sprintf(GLTF.formatSpec_float(),c_data'))));
            source.appendChild(float_array);
            technique_common=documentNode.createElement("technique_common");
            accessor=documentNode.createElement("accessor");
            accessor.setAttribute("count",string(size(c_data,1)));
            accessor.setAttribute("source","#c_array_"+string(mesh_idx)+"_"+string(primitive_idx));
            accessor.setAttribute("stride",string(size(c_data,2)));
            param=documentNode.createElement("param");
            param.setAttribute("name","R");
            param.setAttribute("type","float");
            accessor.appendChild(param);
            param=documentNode.createElement("param");
            param.setAttribute("name","G");
            param.setAttribute("type","float");
            accessor.appendChild(param);
            param=documentNode.createElement("param");
            param.setAttribute("name","B");
            param.setAttribute("type","float");
            accessor.appendChild(param);
            if(size(c_data,2)>3)
                param=documentNode.createElement("param");
                param.setAttribute("name","A");
                param.setAttribute("type","float");
                accessor.appendChild(param);
            end
            technique_common.appendChild(accessor);
            source.appendChild(technique_common);
            mesh.appendChild(source);
        end

        vertices=documentNode.createElement("vertices");
        vertices.setAttribute("id","vertices_"+string(mesh_idx)+"_"+string(primitive_idx));
        input=documentNode.createElement("input");
        input.setAttribute("semantic","POSITION");
        input.setAttribute("source","#source_position_"+string(mesh_idx)+"_"+string(primitive_idx));
        vertices.appendChild(input);
        mesh.appendChild(vertices);

        if(size(faces_data,2)==3)
            triangles=documentNode.createElement("triangles");
        elseif(size(faces_data,2)==2)
            triangles=documentNode.createElement("lines");
        else
            triangles=documentNode.createElement("polylist");
            vertices_count=sum(~isnan(faces_data),2)';
            vcount=documentNode.createElement("vcount");
            vcount.appendChild(documentNode.createTextNode(strip(sprintf(GLTF.formatSpec_integer(),vertices_count))));
            triangles.appendChild(vcount);
        end
        triangles.setAttribute("count",string(size(faces_data,1)));
        if(isfield(gltf.meshes{mesh_idx}.primitives{primitive_idx},'material'))
            triangles.setAttribute("material","material_"+string(gltf.meshes{mesh_idx}.primitives{primitive_idx}.material+1));
        end
        input=documentNode.createElement("input");
        input.setAttribute("semantic","VERTEX");
        input.setAttribute("source","#vertices_"+string(mesh_idx)+"_"+string(primitive_idx));
        input.setAttribute("offset","0");
        triangles.appendChild(input);
        offset=1;
        if(~isempty(normals_data))
            input=documentNode.createElement("input");
            input.setAttribute("semantic","NORMAL");
            input.setAttribute("source","#source_normal_"+string(mesh_idx)+"_"+string(primitive_idx));
            input.setAttribute("offset",string(offset));
            triangles.appendChild(input);
            offset=offset+1;
        end
        if(~isempty(tangents_data))
            input=documentNode.createElement("input");
            input.setAttribute("semantic","TANGENT");
            input.setAttribute("source","#source_tangent_"+string(mesh_idx)+"_"+string(primitive_idx));
            input.setAttribute("offset",string(offset));
            triangles.appendChild(input);
            offset=offset+1;
        end
        if(~isempty(binormals_data))
            input=documentNode.createElement("input");
            input.setAttribute("semantic","BINORMAL");
            input.setAttribute("source","#source_binormal_"+string(mesh_idx)+"_"+string(primitive_idx));
            input.setAttribute("offset",string(offset));
            triangles.appendChild(input);
            offset=offset+1;
        end
        if(isfield(gltf.meshes{mesh_idx}.primitives{primitive_idx}.attributes,'TEXCOORD_0'))
            input=documentNode.createElement("input");
            input.setAttribute("semantic","TEXCOORD");
            input.setAttribute("source","#source_texture_"+string(mesh_idx)+"_"+string(primitive_idx));
            input.setAttribute("set","0");
            input.setAttribute("offset",string(offset));
            triangles.appendChild(input);
            offset=offset+1;
        end
        if(isfield(gltf.meshes{mesh_idx}.primitives{primitive_idx}.attributes,'COLOR_0'))
            input=documentNode.createElement("input");
            input.setAttribute("semantic","COLOR");
            input.setAttribute("source","#source_color_"+string(mesh_idx)+"_"+string(primitive_idx));
            input.setAttribute("set","0");
            input.setAttribute("offset",string(offset));
            triangles.appendChild(input);
        end
        p=documentNode.createElement("p");
        p.appendChild(documentNode.createTextNode(strip(sprintf(GLTF.formatSpec_integer(),idx(:)'))));
        triangles.appendChild(p);

        mesh.appendChild(triangles);
        geometry.appendChild(mesh);
        library_geometries.appendChild(geometry);

        if(isfield(gltf.meshes{mesh_idx}.primitives{primitive_idx},'targets'))
            for target_id=1:numel(gltf.meshes{mesh_idx}.primitives{primitive_idx}.targets)
                vertex_data=gltf.getAccessor(gltf.meshes{mesh_idx}.primitives{primitive_idx}.targets{target_id}.POSITION);
                if(size(faces_data,2)>=3)
                    normals=true;
                else
                    normals=false;
                end
                if(normals)
                    normals_data=GLTF.faceNormals(faces_data,vertex_data);
                else
                    normals_data=[];
                end
                geometry=documentNode.createElement("geometry");
                geometry.setAttribute("id","geometry_"+string(mesh_idx)+"_"+string(primitive_idx)+"_"+string(target_id));
                mesh=documentNode.createElement("mesh");
                source=documentNode.createElement("source");
                source.setAttribute("id","source_position_"+string(mesh_idx)+"_"+string(primitive_idx)+"_"+string(target_id))
                float_array=documentNode.createElement("float_array");
                float_array.setAttribute("id","position_array_"+string(mesh_idx)+"_"+string(primitive_idx)+"_"+string(target_id));
                float_array.setAttribute("count",string(numel(vertex_data)));
                float_array.appendChild(documentNode.createTextNode(strip(sprintf(GLTF.formatSpec_float(),vertex_data'))));
                source.appendChild(float_array);
                technique_common=documentNode.createElement("technique_common");
                accessor=documentNode.createElement("accessor");
                accessor.setAttribute("count",string(size(vertex_data,1)));
                accessor.setAttribute("source","#position_array_"+string(mesh_idx)+"_"+string(primitive_idx)+"_"+string(target_id));
                accessor.setAttribute("stride",string(size(vertex_data,2)));
                param=documentNode.createElement("param");
                param.setAttribute("name","X");
                param.setAttribute("type","float");
                accessor.appendChild(param);
                param=documentNode.createElement("param");
                param.setAttribute("name","Y");
                param.setAttribute("type","float");
                accessor.appendChild(param);
                param=documentNode.createElement("param");
                param.setAttribute("name","Z");
                param.setAttribute("type","float");
                accessor.appendChild(param);
                technique_common.appendChild(accessor);
                source.appendChild(technique_common);
                mesh.appendChild(source);

                if(~isempty(normals_data))
                    source=documentNode.createElement("source");
                    source.setAttribute("id","source_normal_"+string(mesh_idx)+"_"+string(primitive_idx)+"_"+string(target_id))
                    float_array=documentNode.createElement("float_array");
                    float_array.setAttribute("id","normal_array_"+string(mesh_idx)+"_"+string(primitive_idx)+"_"+string(target_id));
                    float_array.setAttribute("count",string(numel(normals_data)));
                    float_array.appendChild(documentNode.createTextNode(strip(sprintf(GLTF.formatSpec_float(),normals_data'))));
                    source.appendChild(float_array);
                    technique_common=documentNode.createElement("technique_common");
                    accessor=documentNode.createElement("accessor");
                    accessor.setAttribute("count",string(size(normals_data,1)));
                    accessor.setAttribute("source","#normal_array_"+string(mesh_idx)+"_"+string(primitive_idx)+"_"+string(target_id));
                    accessor.setAttribute("stride",string(size(normals_data,2)));
                    param=documentNode.createElement("param");
                    param.setAttribute("name","X");
                    param.setAttribute("type","float");
                    accessor.appendChild(param);
                    param=documentNode.createElement("param");
                    param.setAttribute("name","Y");
                    param.setAttribute("type","float");
                    accessor.appendChild(param);
                    param=documentNode.createElement("param");
                    param.setAttribute("name","Z");
                    param.setAttribute("type","float");
                    accessor.appendChild(param);
                    technique_common.appendChild(accessor);
                    source.appendChild(technique_common);
                    mesh.appendChild(source);
                end

                vertices=documentNode.createElement("vertices");
                vertices.setAttribute("id","vertices_"+string(mesh_idx)+"_"+string(primitive_idx)+"_"+string(target_id));
                input=documentNode.createElement("input");
                input.setAttribute("semantic","POSITION");
                input.setAttribute("source","#source_position_"+string(mesh_idx)+"_"+string(primitive_idx)+"_"+string(target_id));
                vertices.appendChild(input);
                mesh.appendChild(vertices);

                geometry.appendChild(mesh);
                library_geometries.appendChild(geometry);
            end

            weights_data=GLTF.toMat(gltf.meshes{mesh_idx}.weights);
            controller=documentNode.createElement("controller");
            controller.setAttribute("id","geometry_"+string(mesh_idx)+"_"+string(primitive_idx)+"_morph");
            morph=documentNode.createElement("morph");
            morph.setAttribute("method","RELATIVE");
            morph.setAttribute("source","#geometry_"+string(mesh_idx)+"_"+string(primitive_idx));
            source=documentNode.createElement("source");
            source.setAttribute("id","morph_targets_"+string(mesh_idx)+"_"+string(primitive_idx));
            idref_array=documentNode.createElement("IDREF_array");
            idref_array.setAttribute("id","morph_targets_array_"+string(mesh_idx)+"_"+string(primitive_idx));
            idref_array.setAttribute("count",string(numel(weights_data)));
            idref_array.appendChild(documentNode.createTextNode(strip(join("geometry_"+string(mesh_idx)+"_"+string(primitive_idx)+"_"+string((1:numel(gltf.meshes{mesh_idx}.primitives{primitive_idx}.targets))')))));
            source.appendChild(idref_array);
            technique_common=documentNode.createElement("technique_common");
            accessor=documentNode.createElement("accessor");
            accessor.setAttribute("count",string(numel(weights_data)));
            accessor.setAttribute("source","#morph_targets_array_"+string(mesh_idx)+"_"+string(primitive_idx));
            accessor.setAttribute("stride","1");
            param=documentNode.createElement("param");
            param.setAttribute("name","MORPH_TARGET");
            param.setAttribute("type","IDREF");
            accessor.appendChild(param);
            technique_common.appendChild(accessor);
            source.appendChild(technique_common);
            morph.appendChild(source);
            source=documentNode.createElement("source");
            source.setAttribute("id","morph_weights_"+string(mesh_idx)+"_"+string(primitive_idx));
            float_array=documentNode.createElement("float_array");
            float_array.setAttribute("id","morph_weights_array_"+string(mesh_idx)+"_"+string(primitive_idx));
            float_array.setAttribute("count",string(numel(weights_data)));
            float_array.appendChild(documentNode.createTextNode(strip(sprintf(GLTF.formatSpec_float(),weights_data))));
            source.appendChild(float_array);
            technique_common=documentNode.createElement("technique_common");
            accessor=documentNode.createElement("accessor");
            accessor.setAttribute("count",string(size(weights_data,2)));
            accessor.setAttribute("source","#morph_weights_array_"+string(mesh_idx)+"_"+string(primitive_idx));
            accessor.setAttribute("stride","1");
            param=documentNode.createElement("param");
            param.setAttribute("name","MORPH_WEIGHT");
            param.setAttribute("type","float");
            accessor.appendChild(param);
            technique_common.appendChild(accessor);
            source.appendChild(technique_common);
            morph.appendChild(source);

            targets=documentNode.createElement("targets");
            input=documentNode.createElement("input");
            input.setAttribute("semantic","MORPH_TARGET");
            input.setAttribute("source","#morph_targets_"+string(mesh_idx)+"_"+string(primitive_idx));
            targets.appendChild(input);
            input=documentNode.createElement("input");
            input.setAttribute("semantic","MORPH_WEIGHT");
            input.setAttribute("source","#morph_weights_"+string(mesh_idx)+"_"+string(primitive_idx));
            targets.appendChild(input);
            morph.appendChild(targets);
            controller.appendChild(morph);
            library_controllers.appendChild(controller);
        end
        node.appendChild(subnode);
    end

    if(isfield(gltf.nodes{node_id},'skin'))
        skin_idx=gltf.nodes{node_id}.skin+1;
        for primitive_idx=1:numel(gltf.meshes{mesh_idx}.primitives)
            controller=documentNode.createElement("controller");
            controller.setAttribute("id","geometry_"+string(mesh_idx)+"_"+string(primitive_idx)+"_skin");
            skin=documentNode.createElement("skin");
            if(isfield(gltf.meshes{mesh_idx}.primitives{primitive_idx},'targets'))
                skin.setAttribute("source","#geometry_"+string(mesh_idx)+"_"+string(primitive_idx)+"_morph");
            else
                skin.setAttribute("source","#geometry_"+string(mesh_idx)+"_"+string(primitive_idx));
            end
            source=documentNode.createElement("source");
            source.setAttribute("id","geometry_"+string(mesh_idx)+"_"+string(primitive_idx)+"_skin_joints");
            IDREF_array=documentNode.createElement("IDREF_array");
            IDREF_array.setAttribute("id","geometry_"+string(mesh_idx)+"_"+string(primitive_idx)+"_skin_joints_array");
            IDREF_array.setAttribute("count",string(numel(gltf.skins{skin_idx}.joints)));
            IDREF_array.appendChild(documentNode.createTextNode(strip(join("node_"+string(GLTF.toMat(gltf.skins{skin_idx}.joints)+1)))));
            source.appendChild(IDREF_array);
            technique_common=documentNode.createElement("technique_common");
            accessor=documentNode.createElement("accessor");
            accessor.setAttribute("count",string(numel(gltf.skins{skin_idx}.joints)));
            accessor.setAttribute("source","#geometry_"+string(mesh_idx)+"_"+string(primitive_idx)+"_skin_joints_array");
            accessor.setAttribute("stride","1");
            param=documentNode.createElement("param");
            param.setAttribute("name","JOINT");
            param.setAttribute("type","IDREF");
            accessor.appendChild(param);
            technique_common.appendChild(accessor);
            source.appendChild(technique_common);
            skin.appendChild(source);

            ibm_data=permute(gltf.getAccessor(gltf.skins{skin_idx}.inverseBindMatrices),[2 1 3]);
            source=documentNode.createElement("source");
            source.setAttribute("id","geometry_"+string(mesh_idx)+"_"+string(primitive_idx)+"_skin_ibm");
            float_array=documentNode.createElement("float_array");
            float_array.setAttribute("id","geometry_"+string(mesh_idx)+"_"+string(primitive_idx)+"_skin_ibm_array");
            float_array.setAttribute("count",string(numel(ibm_data)));
            float_array.appendChild(documentNode.createTextNode(strip(sprintf(GLTF.formatSpec_float(),reshape(ibm_data,1,[])))));
            source.appendChild(float_array);
            technique_common=documentNode.createElement("technique_common");
            accessor=documentNode.createElement("accessor");
            accessor.setAttribute("count",string(size(ibm_data,3)));
            accessor.setAttribute("source","#geometry_"+string(mesh_idx)+"_"+string(primitive_idx)+"_skin_ibm_array");
            accessor.setAttribute("stride",string(size(ibm_data,1)*size(ibm_data,2)));
            param=documentNode.createElement("param");
            param.setAttribute("name","TRANSFORM");
            param.setAttribute("type","float4x4");
            accessor.appendChild(param);
            technique_common.appendChild(accessor);
            source.appendChild(technique_common);
            skin.appendChild(source);

            weights_data=gltf.getAccessor(gltf.meshes{mesh_idx}.primitives{primitive_idx}.attributes.WEIGHTS_0)';
            vcount_data=sum(weights_data>0,1);
            joints_data=gltf.getAccessor(gltf.meshes{mesh_idx}.primitives{primitive_idx}.attributes.JOINTS_0)';
            joints_data=joints_data(weights_data>0);
            [weights_data,~,weights_data_idx]=unique(weights_data(weights_data>0));
            weights_data_idx=weights_data_idx-1;

            source=documentNode.createElement("source");
            source.setAttribute("id","geometry_"+string(mesh_idx)+"_"+string(primitive_idx)+"_skin_weights");
            float_array=documentNode.createElement("float_array");
            float_array.setAttribute("id","geometry_"+string(mesh_idx)+"_"+string(primitive_idx)+"_skin_weights_array");
            float_array.setAttribute("count",string(numel(weights_data)));
            float_array.appendChild(documentNode.createTextNode(strip(sprintf(GLTF.formatSpec_float(),reshape(weights_data,1,[])))));
            source.appendChild(float_array);
            technique_common=documentNode.createElement("technique_common");
            accessor=documentNode.createElement("accessor");
            accessor.setAttribute("count",string(numel(weights_data)));
            accessor.setAttribute("source","#geometry_"+string(mesh_idx)+"_"+string(primitive_idx)+"_skin_weights_array");
            accessor.setAttribute("stride","1");
            param=documentNode.createElement("param");
            param.setAttribute("name","WEIGHT");
            param.setAttribute("type","float");
            accessor.appendChild(param);
            technique_common.appendChild(accessor);
            source.appendChild(technique_common);
            skin.appendChild(source);

            joints=documentNode.createElement("joints");
            input=documentNode.createElement("input");
            input.setAttribute("semantic","JOINT");
            input.setAttribute("source","#geometry_"+string(mesh_idx)+"_"+string(primitive_idx)+"_skin_joints");
            joints.appendChild(input);
            input=documentNode.createElement("input");
            input.setAttribute("semantic","INV_BIND_MATRIX");
            input.setAttribute("source","#geometry_"+string(mesh_idx)+"_"+string(primitive_idx)+"_skin_ibm");
            joints.appendChild(input);
            skin.appendChild(joints);

            vertex_weights=documentNode.createElement("vertex_weights");
            vertex_weights.setAttribute("count",string(numel(vcount_data)));
            input=documentNode.createElement("input");
            input.setAttribute("semantic","JOINT");
            input.setAttribute("offset","0");
            input.setAttribute("source","#geometry_"+string(mesh_idx)+"_"+string(primitive_idx)+"_skin_joints");
            vertex_weights.appendChild(input);
            input=documentNode.createElement("input");
            input.setAttribute("semantic","WEIGHT");
            input.setAttribute("offset","1");
            input.setAttribute("source","#geometry_"+string(mesh_idx)+"_"+string(primitive_idx)+"_skin_weights");
            vertex_weights.appendChild(input);
            vcount=documentNode.createElement("vcount");
            vcount.appendChild(documentNode.createTextNode(strip(sprintf(GLTF.formatSpec_integer(),vcount_data))));
            vertex_weights.appendChild(vcount);
            v=documentNode.createElement("v");
            v.appendChild(documentNode.createTextNode(strip(sprintf(GLTF.formatSpec_integer(),reshape([joints_data';weights_data_idx'],1,[])))));
            vertex_weights.appendChild(v);

            skin.appendChild(vertex_weights);

            controller.appendChild(skin);
            library_controllers.appendChild(controller);
        end
    end
end
